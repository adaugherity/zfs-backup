# sample configuration for hourly backups

# Don't forget to set the $PROP property for the filesystem, and schedule a cron job such as:
# 30 * * * * /path/to/zfs-backup.sh /path/to/this.cfg

# Parameter list
# - PROP: the name of the user-property to search for, among the data sets, to identify which are eligible for backup. 
# - TAG: a string that is matched against the snapshots' names, to identify which are eligible for backup.
# - REMHOST: IP/hostname of receiving host. Commands will be sent through ssh, but if this equals to "localhost", ssh will be bypassed.
# - REMUSER: user to use during remote ssh connection.
# - REMPOOL: name of the remote pool, to save the snapshot into.
# - DEBUG: if set to not null, dry-run is enabled.
# - VERBOSE: set to "-v" for verbose mode.
# - LOCK: file that is created in case zfs-backup ever has problems, and enters manteinance mode. No need to change this.
# - PID: pid file for zfs-backup. No need to change this.
# - MAXAGE: if the latest remote snapshot is not found locally, to base the increment on, then up to MAXAGE-1 older snapshot are
#           tried instead. Set to 0 to try indefinitely. Set to 1 (default) to skip this behaviour.
#           WARNING: this parameter allows automatic recovery in case of local backup rotation, but be aware that when zfs tries to
#           receive from a snapshot other than the latest, the newer snapshots are DESTROYED, and then replaced by the new history.
#           You will lose the snapshot on the backup, although newer ones will be created instead. The default value of 1 prevents
#           this behaviour, requiring manual intervention (e.g. cloning of the remote recent snapshots).

TAG="zfs-auto-snap_hourly"
LOCK="/var/tmp/zfsbackup.lock"
PID="/var/tmp/zfsbackup.pid"
# remote settings (on destination host)
REMUSER="zfsbak"
REMHOST="backupserver.local"
REMPOOL="backuppool"
